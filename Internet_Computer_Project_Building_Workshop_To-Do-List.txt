// imported
import Map "mo:base/HashMap";
import Hash "mo:base/Hash";
import Nat "mo:base/Nat";   //doğal sayı
import Iter "mo:base/Iter";
import Text "mo:base/Text";
//actor -> canister -> smart contract

actor Assistant{
  // class

  type ToDo={
      description : Text;
      completed : Bool;
     };
   // function ->query ->sorgu
   //update -> new info input

  func natHash (n: Nat) : Hash.Hash{
    Text.hash(Nat.toText(n))
  };

  //variables-> let -> immutable
  //variables -> var -> mutable
  //global -> const
  
  var todos = Map.HashMap<Nat,ToDo>(0,Nat.equal,natHash);
  var nextId : Nat=0;

  public query func getTodos():async [ToDo]{
    Iter.toArray(todos.vals());
  };

  //data import

  public func addTodo (description : Text) : async Nat{
    let id = nextId;
    todos.put(id,{description = description; completed = false});
    nextId+=1; 
    id   //return id şeklinde de olabiliyor iki kullanımı var ksıası bu şekilde sadece id
  };

  public func comleteTodo(id : Nat) : async(){
    ignore do ?{      // string int ne ise 
      let description =todos.get(id)!.description;
      todos.put(id,{description;completed=true});
    }
  };
  
  public query func showTodos() : async Text{
      var output : Text ="\n__TO-DOs__";
      for(todo : ToDo in todos.vals()){
        output #= "\n" # todo.description;
        if(todo.completed){output#=" +";};
      };
      output # "\n"
  };

  public func clearCompleted() : async (){
        todos := Map.mapFilter<Nat,ToDo,ToDo>(todos,Nat.equal,natHash,
        func(_,todo){if (todo.completed) null else ?todo });
    };
  
  };
